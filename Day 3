Day 3 – React Hooks (useEffect, useRef, useContext)
==================================================

THEORY
------

useEffect
---------
Runs side effects in components (like API calls, fetching data, updating title, timers).

Syntax:
--------
useEffect(() => {
  console.log("Component mounted or updated!");
}, []);

Empty dependency [] → Runs only once on mount.
With dependencies → Runs when that value changes.

Industry Use Case:
------------------
Spotify uses useEffect to fetch songs when you search.

Creative Use Case:
------------------
Resume autosaves every 10 seconds using useEffect.


useRef
------
Stores a mutable reference that doesn’t re-render the component.
Often used for accessing DOM elements directly.

Example:
--------
const inputRef = useRef(null);

function FocusInput() {
  const handleClick = () => inputRef.current.focus();

  return (
    <div>
      <input ref={inputRef} type="text" />
      <button onClick={handleClick}>Focus Input</button>
    </div>
  );
}

Industry Use Case:
------------------
Handling audio recording or video controls.

Creative Use Case:
------------------
Click a button to auto-focus an AI prompt input box.


useContext
----------
Helps share global state across components without prop drilling.

Example:
--------
const UserContext = React.createContext();

function App() {
  return (
    <UserContext.Provider value={{ name: "Ashu", role: "Developer" }}>
      <Profile />
    </UserContext.Provider>
  );
}

function Profile() {
  const user = React.useContext(UserContext);
  return <h2>{user.name} - {user.role}</h2>;
}

Industry Use Case:
------------------
User authentication & theme settings across an app.

Creative Use Case:
------------------
Share resume data globally across sections.


ASSIGNMENTS
-----------

1. useEffect (Fetch Posts & Display Titles)
-------------------------------------------
import React, { useEffect, useState } from "react";

function PostsList() {
  const [posts, setPosts] = useState([]);

  useEffect(() => {
    // Fetch posts from API
    fetch("https://jsonplaceholder.typicode.com/posts")
      .then((response) => response.json())
      .then((data) => setPosts(data))
      .catch((error) => console.error("Error fetching posts:", error));
  }, []); // runs once when component mounts

  return (
    <div>
      <h2>Posts</h2>
      <ul>
        {posts.map((post) => (
          <li key={post.id}>{post.title}</li>
        ))}
      </ul>
    </div>
  );
}

export default PostsList;


2. useRef (Focus Input on Button Click)
---------------------------------------
import React, { useRef } from "react";

function FocusInput() {
  const inputRef = useRef(null);

  const handleFocus = () => {
    inputRef.current.focus();
  };

  return (
    <div>
      <h2>Focus Input Example</h2>
      <input ref={inputRef} type="text" placeholder="Type something..." />
      <button onClick={handleFocus}>Focus Input</button>
    </div>
  );
}

export default FocusInput;
